package gui;


import java.awt.Rectangle;
import java.util.ArrayList;
import java.util.Arrays;
import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import opcode.*;
import java.util.regex.*;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Faith
 */
public class frame extends javax.swing.JFrame{
//    public static ArrayList<String> Register = new ArrayList();
//    public static int nRegistersCount = 32;
    
    public static ArrayList<String> dataSegment = new ArrayList<>();
    public static ArrayList<String> codeSegment = new ArrayList<>();
    public static DefaultListModel dm = new DefaultListModel();
    public static Memory memory = new Memory();
    public static Registers[] r = new Registers[32];
    
    /**
     * Creates new form frame
     */
    public frame() {
        initComponents();
        initializeRegisters();
        initializeMem();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        button = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        textarea = new javax.swing.JTextArea();
        errortab = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        errorscreen = new javax.swing.JTextArea();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        opcodeTable = new javax.swing.JTable();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTable3 = new javax.swing.JTable();
        jToggleButton1 = new javax.swing.JToggleButton();
        jPanel7 = new javax.swing.JPanel();
        jScrollPane9 = new javax.swing.JScrollPane();
        regTable = new javax.swing.JTable();
        jPanel6 = new javax.swing.JPanel();
        jScrollPane8 = new javax.swing.JScrollPane();
        memoryTable = new javax.swing.JTable();
        MemSearchArea = new javax.swing.JTextArea();
        jScrollPane5 = new javax.swing.JScrollPane();
        searchMEM = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        jScrollPane7 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        resetButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        button.setText("go");
        button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonActionPerformed(evt);
            }
        });

        textarea.setColumns(20);
        textarea.setRows(5);
        jScrollPane1.setViewportView(textarea);

        errortab.setToolTipText("");
        errortab.setAutoscrolls(true);
        errortab.setName(""); // NOI18N
        errortab.setPreferredSize(new java.awt.Dimension(487, 600));

        errorscreen.setEditable(false);
        errorscreen.setColumns(20);
        errorscreen.setRows(5);
        jScrollPane2.setViewportView(errorscreen);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 488, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 471, Short.MAX_VALUE)
                .addContainerGap())
        );

        errortab.addTab("Error Checking", jPanel1);

        opcodeTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Instruction", "Values", "Opcode"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                true, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(opcodeTable);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane3)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 304, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 179, Short.MAX_VALUE))
        );

        errortab.addTab("Opcode", jPanel2);

        jTable3.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Address", "Representation", "Instruction"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane4.setViewportView(jTable3);

        jToggleButton1.setText("Go To");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(181, 181, 181)
                .addComponent(jToggleButton1)
                .addContainerGap(238, Short.MAX_VALUE))
            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel3Layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap(454, Short.MAX_VALUE)
                .addComponent(jToggleButton1))
            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel3Layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );

        errortab.addTab("Data", jPanel3);

        regTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Register", "Value"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        regTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                regEdit(evt);
            }
        });
        jScrollPane9.setViewportView(regTable);

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel7Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel7Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane9, javax.swing.GroupLayout.PREFERRED_SIZE, 363, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(93, 93, 93))
        );

        errortab.addTab("Registers", jPanel7);

        memoryTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Address", "Data"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        memoryTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                memoryTableMousePressed(evt);
            }
        });
        jScrollPane8.setViewportView(memoryTable);

        MemSearchArea.setColumns(20);
        MemSearchArea.setRows(5);

        searchMEM.setLabel("Search");
        searchMEM.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchMEMActionPerformed(evt);
            }
        });

        jLabel1.setText("Go To:");

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGap(147, 147, 147)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(MemSearchArea, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(searchMEM, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(67, 67, 67))
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 289, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(searchMEM, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(90, 90, 90))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                        .addComponent(MemSearchArea, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(93, 93, 93)))
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(31, 31, 31))
        );

        errortab.addTab("Memory", jPanel6);

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"IF Cycle:", "IF/ID.IR", null},
                {null, "IF/ID.PC", null},
                {"ID Cycle: ", "ID/EX.IR", null},
                {null, "ID/EX.A", null},
                {null, "ID/EX.B", null},
                {null, "ID/EX. IMM", null},
                {"EX Cycle: ", "EX/MEM.IR", null},
                {null, "EX/MEM.ALUOUTPUT", null},
                {null, "EX/MEM.B", null},
                {null, "EX/MEM.cond", null},
                {"MEM Cycle:", "MEM/WB.IR", null},
                {null, "MEM/WB.ALUOUTPUT", null},
                {null, "MEM/WB.LMD", null},
                {null, "actual memory affected", null},
                {"WB Cycle:", "Registers affected", null}
            },
            new String [] {
                "Internal Registers", "", "Cycle 1"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane7.setViewportView(jTable2);

        jButton1.setText("Execute");

        jButton2.setText("Full Execute");

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(123, 123, 123)
                .addComponent(jButton1)
                .addGap(18, 18, 18)
                .addComponent(jButton2)
                .addContainerGap(146, Short.MAX_VALUE))
            .addComponent(jScrollPane7)
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addComponent(jScrollPane7, javax.swing.GroupLayout.DEFAULT_SIZE, 448, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2)))
        );

        errortab.addTab("Pipeline", jPanel5);

        resetButton.setText("reset");
        resetButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(errortab, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 521, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(button)
                                .addGap(18, 18, 18)
                                .addComponent(resetButton)
                                .addGap(0, 0, Short.MAX_VALUE)))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 203, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(button)
                    .addComponent(resetButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(errortab, javax.swing.GroupLayout.PREFERRED_SIZE, 400, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        errortab.getAccessibleContext().setAccessibleName("error");

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    public static void addRowToRegTable(Registers[] r)
    {
        DefaultTableModel Regmodel = (DefaultTableModel) regTable.getModel();
        Object rowData[] = new Object[2];
       for(int i = 0; i < 32; i++) {
            rowData[0] = r[i].getRegName();
            rowData[1] = r[i].getRValue();
            Regmodel.addRow(rowData);
	}
                
    }
    public static void initializeRegisters(){
        
        for (int i = 0; i < 32; i++){
			r[i] = new Registers();
		}
        
        for (int i = 0; i < 32; i++){
			r[i].setRValue("0000000000000000");
                        r[i].setRegName("R"+i);
		}
        
            addRowToRegTable(r);
        
    }
    
    public static void initializeMem(){
       DefaultTableModel memoryModel = (DefaultTableModel) memoryTable.getModel();
		for(int i = 0; i < 8192; i++) {
			memoryModel.addRow(new Object[] {Integer.toHexString(i).toUpperCase(), "00"});
		}
    }
    
    
    public static void addRowToJTable1(Code[] c, int size)
    {
        DefaultTableModel Insmodel = (DefaultTableModel) opcodeTable.getModel();
        Object rowData[] = new Object[3];
        for(int i = 0; i < size; i++)
        {
            rowData[0] = c[i].getIns();
            rowData[1] = c[i].getbinOPC();
            rowData[2] = c[i].getOPC();
            Insmodel.addRow(rowData);
        }
                
    }
    
    public static void addRowToJTable3(Code[] c, int size)
    {
        DefaultTableModel OPCmodel = (DefaultTableModel) jTable3.getModel();
        Object rowData[] = new Object[3];
        for(int i = 0; i < size; i++)
        {
            rowData[0] = c[i].getAdd();
            rowData[1] = c[i].getOPC();
            rowData[2] = c[i].getIns();
            OPCmodel.addRow(rowData);
        }
                
    }
    
    private void startProgram(){
        initializeRegisters();
        String areaText = textarea.getText();
        String[] inputText = areaText.split("\n");
        
        boolean dataDone = false;
        boolean codeDone = false;
        
        ArrayList<String[]> splitData = new ArrayList<>();
        ArrayList<String[]> splitCode = new ArrayList<>();
        
        String[] instruction; // line in code segment
        String[] variable; // line in data segment
        
        int errorCount = 0;
        int tempCount = 0;
        ArrayList<String> errorMessage = new ArrayList<>();

        for(int i=0; i < inputText.length; i++){
            if(inputText[i].equals(".data") && !dataDone){
                i = segment(dataSegment, inputText, i);
                dataDone = true;
            }
            else if(inputText[i].equals(".code") && !codeDone){
                i = segment(codeSegment, inputText, i);
                codeDone = true;
            }
        }

        splitSegment(dataSegment, splitData);
        splitSegment(codeSegment, splitCode);
        
        for(int i=0; i < splitData.size(); i++){
            variable = splitData.get(i);
            
            switch(checkVariable(variable)){
                case "INVALID": errorMessage.add("Error at data segment line " + (i+1) + ": " + dataSegment.get(i));
                                errorCount++;
                                break;
                default:        break;
            }
        }
        
        for(int i=0; i < splitCode.size(); i++){
            instruction = splitCode.get(i);
            
            switch(checkInstruction(instruction, 0)){
                case "INVALID": errorMessage.add("Error at code segment line " + (i+1) + ": " + codeSegment.get(i));
                                errorCount++;
                                break;
                case "LABEL":   tempCount = errorCount;
                                errorCount = checkLabel(splitCode.get(i), instruction[0], errorCount);
                                if(errorCount > tempCount){
                                    errorMessage.add("Error at code segment line " + (i+1) + ": " + codeSegment.get(i));
                                }
                                break;
                default:        break;
            }
        }
        
        if(!errorFound(errorCount, errorMessage)){
            codeParse(splitCode);
        }

        // if no errors, establish "memory"
        // interpret data segment, initialize variables if there are
       
        initializeMem();
        DefaultTableModel tableModel = (DefaultTableModel) memoryTable.getModel();
            for(int i = 4096; i <memory.getMemory().length; i++) {
                tableModel.setValueAt(memory.getMemoryValue(i), i, 1);
	}
    }
    
    private void buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonActionPerformed
        // TODO add your handling code here:
        startProgram();
    }//GEN-LAST:event_buttonActionPerformed
    
    private void searchMEMActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchMEMActionPerformed
        // TODO add your handling code here:
        Rectangle cellRect = memoryTable.getCellRect(Integer.parseInt(MemSearchArea.getText(), 16), 0, true);
	memoryTable.scrollRectToVisible(cellRect);
    }//GEN-LAST:event_searchMEMActionPerformed

    private void regEdit(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_regEdit
        editSelectedRegister();
    }//GEN-LAST:event_regEdit

    private void memoryTableMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_memoryTableMousePressed
        editMemory();
    }//GEN-LAST:event_memoryTableMousePressed

    private void resetButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetButtonActionPerformed
        // TODO add your handling code here:
        textarea.setText(""); 
    }//GEN-LAST:event_resetButtonActionPerformed

    private void editMemory()
    {
        int registerSelectedIndex = memoryTable.getSelectedRow();
        String input = JOptionPane.showInputDialog(this, "Enter Memory Value " + registerSelectedIndex + ": ", "Memory Input ", 3).toUpperCase();
        if ((input != null) && (input.length() == 2))
                    if(input.matches("([0-9A-F][0-9A-F])")){
                           
                            memory.setOpcodeList(input, registerSelectedIndex) ;
                            memoryTable.setValueAt(input, registerSelectedIndex, 1);
                            System.out.println("Memory "+registerSelectedIndex+": "+memory.getMemoryValue(registerSelectedIndex));
                    }
                else {
            JOptionPane.showMessageDialog(null, "Sorry, you entered an invalid input. Please enter a valid value in Hex.", "Invalid Input ", 0);
          }
        
    }
    
    private void editSelectedRegister()
  {
    int registerSelectedIndex = regTable.getSelectedRow();
    if (registerSelectedIndex == 0) {
      JOptionPane.showMessageDialog(null, "Unable to edit", "Invalid", 0);
    }
    else {
      String input = JOptionPane.showInputDialog(this, "Enter Register Value " + registerSelectedIndex + ": ", "Register Input ", 3).toUpperCase();
      if ((input != null) && (input.length() == 16))
          if(input.matches("([0-9A-F][0-9A-F][0-9A-F][0-9A-F][0-9A-F][0-9A-F][0-9A-F]"
              + "[0-9A-F][0-9A-F][0-9A-F][0-9A-F][0-9A-F][0-9A-F][0-9A-F][0-9A-F][0-9A-F])")){
                input = input.replaceAll(" ", "");
                if (input.length() <= 16) {
                  r[registerSelectedIndex].setRValue(input);
                  regTable.setValueAt(input, registerSelectedIndex, 1);
                  System.out.println("R"+registerSelectedIndex+": "+r[registerSelectedIndex].getRValue());
                  }   
            }
            else {
                JOptionPane.showMessageDialog(null, "Sorry, you entered an invalid input. Please enter a valid value in Hex.", "Invalid Input ", 0);
             }
      else {
                JOptionPane.showMessageDialog(null, "Sorry, you entered an invalid input. Please enter a valid value in Hex.", "Invalid Input ", 0);
             }
    }
  }
    
        
    /* This function splits code/data segments */
    private static void splitSegment(ArrayList<String> segment, ArrayList<String[]> split){
        segment.remove(0);
        
        for(int i=0; i < segment.size(); i++){
            split.add(segment.get(i).split(" "));     
        }
    }
    
    /* This function determines if there is an error found */
    private static boolean errorFound(int count, ArrayList<String> message){
        boolean isError = false;
        
        errorscreen.setText("");
        
        if(count > 0 && !message.isEmpty()){
            if(count > 1){
                errorscreen.append(count + " errors found.\n");
            }
            else{
                errorscreen.append(count + " error found.\n");
            }
            
            for(int i=0; i < message.size(); i++){
                errorscreen.append(message.get(i) + "\n");
            }
            
            isError = true;
        }
        else{
            errorscreen.append("No errors found.\n");
        }
        
        return isError;
    }
    
    /* This function separates the data segment from the code segment */
    public static int segment(ArrayList<String> segment, String[] input, int i){
        // every next line is considered part of data segment until .code is reached or end of text is reached
        
        String type = input[i];
        
        do{
            if((type.equals(".data") && input[i].equals(".code")) || (type.equals(".code") && input[i].equals(".data"))){
                i--;
                break;
            }
            
            segment.add(input[i]);
            
            i++;
        }while(i < (input.length));
        
        return i;
    }
    
    /* This function checks if the instruction in a line is a valid instruction */
    public static String checkInstruction(String[] instruction, int index){
        String[] instructionSet = {"LD", "SD", "DADDIU", "DADDU", "SLT", "NOP", "BC", "BLTC", "DSUBU"};
        boolean isValid = false;
        int length = instruction.length;
        
        if(index == 1){
            length--;
        }
        
        if(instruction[index].equals("")){
            return "EMPTY";
        }
        else if(instruction[index].startsWith(";")){
            return "COMMENT";
        }
        else if(instruction[index].endsWith(":")){
            return "LABEL";
        }
        else{
            for(int i=0; i < instructionSet.length; i++){
                if(instruction[index].equals(instructionSet[i])){
                    isValid = true;
                    break;
                }
            }
        }
        
        if(isValid){
            switch(instruction[index]){
                case "LD":      if(length == 3){
                                    return "VALID";
                                }
                                break;
                case "SD":      if(length == 3){
                                    return "VALID";
                                }
                                break;
                case "DADDIU":  if(length == 4){
                                    return "VALID";
                                }
                                break;
                case "DADDU":   if(length == 4){
                                    return "VALID";
                                }
                                break;
                case "SLT":     if(length == 4){
                                    return "VALID";
                                }
                                break;
                case "NOP":     if(length == 1){                 
                                    return "VALID";
                                }
                                break;
                case "BLTC":    if(length == 4){
                                    return "VALID";
                                }
                                break;
                case "DSUBU":    if(length == 4){
                                    return "VALID";
                                }
                case "BC":     if(length == 2){                 
                                    return "VALID";
                                }
                                break;
                default:        break;
            }
        }
        
        return "INVALID";        
    }

    /* This function checks if the label in a line is valid */    
    public static int checkLabel(String[] line, String label, int errorCount){
        if(line.length > 1){
            switch(checkInstruction(line, 1)){
                case "INVALID": errorCount++;
                                break;
                default:
                                break;
            }
        }
        
        return errorCount;
    }
    
    /* This function checks if the data segment line is valid */    
    public static String checkVariable(String[] variable){
        if(variable.length == 1 && variable[0].equals("")){
            return "EMPTY";
        }
        if(variable[0].startsWith(";")){
            return "COMMENT";
        }
        else if(variable[0].endsWith(":") && variable[1].startsWith(".")){
            return "VALID";
        }
        
        return "INVALID";
    }
    
    public static void dataParse(ArrayList<String[]> data){
        Data[] d = new Data[data.size()];
        int address = 0000;
        
        for(int i = 0; i < d.length; i++){
            //d[i].setdAddress(address);
            address += 8;
            
            for(int j=0; i < data.size(); j++){
                
            }
        }
    }
    
    
    
    public static void CodeClass(Code[] c,int i, int countAdd, String INS){
        c[i] = new Code(); //Code Class instantiate
        c[i].setAdd(opcode.hexa.decToHex(countAdd).substring(4));//assign an address
        String formattedString = INS
        .replace(",", "")  //remove the commas
        .replace("[", "")  //remove the right bracket
        .replace("]", "")  //remove the left bracket
        .trim(); 
        c[i].setins(formattedString);
        
        
        
    }
    
    public static void codeParse(ArrayList<String[]> code){
        int shift = 0;
        Code[] c = new Code[code.size()];// Code Class array instantiate
        int countAdd=4096;// for PC
        int k = 4096;

        for(int i=0; i < code.size(); i++){
            
            
            if(code.get(i)[0].contains(":"))
                shift = 1;
            else 
                shift = 0;
            switch(code.get(i)[shift]){
                case "LD":      CodeClass(c,i,countAdd, Arrays.toString(code.get(i)));
                                opcode.hexa.ld(code.get(i)[shift+1], code.get(i)[shift+2],c,i);
                                break;
                case "SD":      CodeClass(c,i,countAdd, Arrays.toString(code.get(i)));
                                opcode.hexa.sd(code.get(i)[shift+1], code.get(i)[shift+2],c,i);
                                break;
                case "DADDIU":  CodeClass(c,i,countAdd, Arrays.toString(code.get(i)));
                                opcode.hexa.daddiu(code.get(i)[shift+1], code.get(i)[shift+2], code.get(i)[shift+3],c,i);
                                break;
                case "XORI":    CodeClass(c,i,countAdd, Arrays.toString(code.get(i)));
                                opcode.hexa.xori(code.get(i)[shift+1], code.get(i)[shift+2], code.get(i)[shift+3],c,i);
                                break;
                case "DADDU":   CodeClass(c,i,countAdd, Arrays.toString(code.get(i)));
                                opcode.hexa.daddu(code.get(i)[shift+1], code.get(i)[shift+2], code.get(i)[shift+3],c,i);
                                break;
                case "SLT":     CodeClass(c,i,countAdd, Arrays.toString(code.get(i)));
                                opcode.hexa.slt(code.get(i)[shift+1], code.get(i)[shift+2], code.get(i)[shift+3],c,i);
                                break;
                case "BEQC":    CodeClass(c,i,countAdd, Arrays.toString(code.get(i)));
                                opcode.hexa.beqc(code.get(i)[shift+1], code.get(i)[shift+2], code.get(i)[shift+3],c,i);
                                break;
                case "J":       CodeClass(c,i,countAdd, Arrays.toString(code.get(i)));
                                opcode.hexa.jump(code.get(i)[shift+1],c,i);
                                break;
                case "NOP":     CodeClass(c,i,countAdd, Arrays.toString(code.get(i)));
                                opcode.hexa.nop(c,i);
                                break;
                case "BLTC":    CodeClass(c,i,countAdd, Arrays.toString(code.get(i)));
                                opcode.hexa.bltc(code.get(i)[shift+1], code.get(i)[shift+2], code.get(i)[shift+3], code,c,i);
                                break;
                case "DSUBU":   CodeClass(c,i,countAdd, Arrays.toString(code.get(i)));
                                opcode.hexa.dsubu(code.get(i)[shift+1], code.get(i)[shift+2], code.get(i)[shift+3],c,i);
                                break;
                case "BC":      CodeClass(c,i,countAdd, Arrays.toString(code.get(i)));
                                opcode.hexa.bc(code.get(i)[shift+1], code,c,i);
                                break;
                default:        break;
                        
                                
            }
            countAdd+=4;
        for(int j = 8; j > 0; j--) {
                memory.setOpcodeList(c[i].getOPC().substring(j - 2, j), k);
		j--;
		k++;
		}
        }
            addRowToJTable1(c,code.size());
            addRowToJTable3(c,code.size());
        
    }
    
    public static ArrayList getCode(){
        ArrayList code = new ArrayList<>();
        code = codeSegment;
        return code;
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new frame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea MemSearchArea;
    private javax.swing.JButton button;
    public static javax.swing.JTextArea errorscreen;
    private javax.swing.JTabbedPane errortab;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel5;
    public static javax.swing.JPanel jPanel6;
    public static javax.swing.JPanel jPanel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JScrollPane jScrollPane9;
    private javax.swing.JTable jTable2;
    public static javax.swing.JTable jTable3;
    private javax.swing.JToggleButton jToggleButton1;
    public static javax.swing.JTable memoryTable;
    public static javax.swing.JTable opcodeTable;
    public static javax.swing.JTable regTable;
    private javax.swing.JButton resetButton;
    private javax.swing.JButton searchMEM;
    private javax.swing.JTextArea textarea;
    // End of variables declaration//GEN-END:variables
}
